// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: project/project.proto

package project

import (
	context "context"
	messages "github.com/ikramanop/mvcs-client/app/protobuf/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectClient is the client API for Project service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectClient interface {
	CreateBranch(ctx context.Context, in *messages.CreateBranchRequest, opts ...grpc.CallOption) (*messages.Branch, error)
	GetAllBranches(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.GetBranchesResponse, error)
	UploadFile(ctx context.Context, in *messages.UploadFileRequest, opts ...grpc.CallOption) (*messages.UploadFileResponse, error)
	UploadFiles(ctx context.Context, in *messages.UploadFilesRequest, opts ...grpc.CallOption) (*messages.UploadFilesResponse, error)
	GetFileVersions(ctx context.Context, in *messages.GetFileVersionRequest, opts ...grpc.CallOption) (*messages.FileResponse, error)
}

type projectClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectClient(cc grpc.ClientConnInterface) ProjectClient {
	return &projectClient{cc}
}

func (c *projectClient) CreateBranch(ctx context.Context, in *messages.CreateBranchRequest, opts ...grpc.CallOption) (*messages.Branch, error) {
	out := new(messages.Branch)
	err := c.cc.Invoke(ctx, "/project.Project/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) GetAllBranches(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.GetBranchesResponse, error) {
	out := new(messages.GetBranchesResponse)
	err := c.cc.Invoke(ctx, "/project.Project/GetAllBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) UploadFile(ctx context.Context, in *messages.UploadFileRequest, opts ...grpc.CallOption) (*messages.UploadFileResponse, error) {
	out := new(messages.UploadFileResponse)
	err := c.cc.Invoke(ctx, "/project.Project/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) UploadFiles(ctx context.Context, in *messages.UploadFilesRequest, opts ...grpc.CallOption) (*messages.UploadFilesResponse, error) {
	out := new(messages.UploadFilesResponse)
	err := c.cc.Invoke(ctx, "/project.Project/UploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) GetFileVersions(ctx context.Context, in *messages.GetFileVersionRequest, opts ...grpc.CallOption) (*messages.FileResponse, error) {
	out := new(messages.FileResponse)
	err := c.cc.Invoke(ctx, "/project.Project/GetFileVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServer is the server API for Project service.
// All implementations must embed UnimplementedProjectServer
// for forward compatibility
type ProjectServer interface {
	CreateBranch(context.Context, *messages.CreateBranchRequest) (*messages.Branch, error)
	GetAllBranches(context.Context, *emptypb.Empty) (*messages.GetBranchesResponse, error)
	UploadFile(context.Context, *messages.UploadFileRequest) (*messages.UploadFileResponse, error)
	UploadFiles(context.Context, *messages.UploadFilesRequest) (*messages.UploadFilesResponse, error)
	GetFileVersions(context.Context, *messages.GetFileVersionRequest) (*messages.FileResponse, error)
	mustEmbedUnimplementedProjectServer()
}

// UnimplementedProjectServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServer struct {
}

func (UnimplementedProjectServer) CreateBranch(context.Context, *messages.CreateBranchRequest) (*messages.Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (UnimplementedProjectServer) GetAllBranches(context.Context, *emptypb.Empty) (*messages.GetBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBranches not implemented")
}
func (UnimplementedProjectServer) UploadFile(context.Context, *messages.UploadFileRequest) (*messages.UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedProjectServer) UploadFiles(context.Context, *messages.UploadFilesRequest) (*messages.UploadFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedProjectServer) GetFileVersions(context.Context, *messages.GetFileVersionRequest) (*messages.FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileVersions not implemented")
}
func (UnimplementedProjectServer) mustEmbedUnimplementedProjectServer() {}

// UnsafeProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServer will
// result in compilation errors.
type UnsafeProjectServer interface {
	mustEmbedUnimplementedProjectServer()
}

func RegisterProjectServer(s grpc.ServiceRegistrar, srv ProjectServer) {
	s.RegisterService(&Project_ServiceDesc, srv)
}

func _Project_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Project/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).CreateBranch(ctx, req.(*messages.CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_GetAllBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).GetAllBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Project/GetAllBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).GetAllBranches(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Project/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).UploadFile(ctx, req.(*messages.UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UploadFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Project/UploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).UploadFiles(ctx, req.(*messages.UploadFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_GetFileVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetFileVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).GetFileVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Project/GetFileVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).GetFileVersions(ctx, req.(*messages.GetFileVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Project_ServiceDesc is the grpc.ServiceDesc for Project service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Project_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.Project",
	HandlerType: (*ProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBranch",
			Handler:    _Project_CreateBranch_Handler,
		},
		{
			MethodName: "GetAllBranches",
			Handler:    _Project_GetAllBranches_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Project_UploadFile_Handler,
		},
		{
			MethodName: "UploadFiles",
			Handler:    _Project_UploadFiles_Handler,
		},
		{
			MethodName: "GetFileVersions",
			Handler:    _Project_GetFileVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project/project.proto",
}
